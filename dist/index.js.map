{
  "version": 3,
  "sources": ["../src/data-vault/read.ts", "../src/data-vault/delete.ts", "../src/data-vault/create.ts", "../src/data-vault/index.ts", "../src/payment-intent/process.ts", "../src/payment-intent/create.ts", "../src/payment-intent/index.ts", "../src/index.ts"],
  "sourcesContent": ["export type ReadDataVault = {\n  groupId: string;\n};\n\ntype ReadDataVaultResponse = {\n  dataVaults: {\n    id: string;\n    token: string;\n    name: string | null;\n    groupId: string;\n    brand: string;\n    cardNumber: string;\n    expiration: string;\n    cvc: string;\n    createdAt: Date;\n    updatedAt: Date;\n  }[];\n};\n\nexport async function readDataVault({\n  data,\n  url,\n}: {\n  data: ReadDataVault;\n  url: string;\n}): Promise<ReadDataVaultResponse> {\n  const response = await fetch(`${url}/data-vaults/${data.groupId}`);\n\n  if (!response.ok) {\n    throw new Error(\"Failed to read data vault\");\n  }\n\n  return response.json();\n}\n", "export type DeleteDataVault = {\n  token: string;\n};\n\ntype DeleteDataVaultResponse = {\n  success: boolean;\n};\n\nexport async function deleteDataVault({\n  data,\n  url,\n}: {\n  data: DeleteDataVault;\n  url: string;\n}): Promise<DeleteDataVaultResponse> {\n  const response = await fetch(`${url}/data-vaults/${data.token}`, {\n    method: \"DELETE\",\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to create data vault\");\n  }\n\n  return response.json();\n}\n", "export type CreateDataVault = {\n  groupId: string;\n  name: string;\n  cardNumber: string;\n  expiration: string;\n  cvc: string;\n};\n\ntype CreateDataVaultResponse = {\n  token: string;\n};\n\nexport async function createDataVault({\n  data,\n  url,\n}: {\n  data: CreateDataVault;\n  url: string;\n}): Promise<CreateDataVaultResponse> {\n  const response = await fetch(`${url}/data-vaults`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to create data vault\");\n  }\n\n  return response.json();\n}\n", "import { readDataVault, ReadDataVault } from \"./read\";\nimport { deleteDataVault, DeleteDataVault } from \"./delete\";\nimport { createDataVault, CreateDataVault } from \"./create\";\n\nexport class DataVault {\n  public readonly url: string;\n\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  async create(data: CreateDataVault) {\n    return createDataVault({ data, url: this.url });\n  }\n\n  async delete(data: DeleteDataVault) {\n    return deleteDataVault({ data, url: this.url });\n  }\n\n  async read(data: ReadDataVault) {\n    return readDataVault({ data, url: this.url });\n  }\n}\n", "export type ProcessPayment = {\n  paymentIntentId: string;\n  details:\n    | {\n        type: \"creditCard\";\n        cardNumber: string;\n        expiration: string;\n        CVC: string;\n      }\n    | {\n        type: \"token\";\n        dataVaultToken: string;\n      };\n};\n\ntype ProcessPaymentResponse =\n  | {\n      html: string;\n      url: undefined;\n    }\n  | {\n      html: undefined;\n      url: string;\n    };\n\nexport async function processPayment({\n  data,\n  url,\n}: {\n  data: ProcessPayment;\n  url: string;\n}): Promise<ProcessPaymentResponse> {\n  const response = await fetch(\n    `${url}/payment_intents/${data.paymentIntentId}/process`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data.details),\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to process payment\");\n  }\n\n  return response.json();\n}\n", "export type CreatePaymentIntent = {\n  amount: number;\n  reference: string;\n  email: string;\n  successURL: string;\n  failureURL: string;\n  webhookURL: string;\n};\n\ntype CreatePaymentIntentResponse = {\n  paymentIntentId: string;\n};\n\nexport async function createPaymentIntent({\n  data,\n  url,\n}: {\n  data: CreatePaymentIntent;\n  url: string;\n}): Promise<CreatePaymentIntentResponse> {\n  const response = await fetch(`${url}/payments/intents`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to create payment intent\");\n  }\n\n  return response.json();\n}\n", "import { processPayment, ProcessPayment } from \"./process\";\nimport { createPaymentIntent, CreatePaymentIntent } from \"./create\";\n\nexport class PaymentIntent {\n  public readonly url: string;\n\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  async process(data: ProcessPayment) {\n    return processPayment({ data, url: this.url });\n  }\n\n  async create(data: CreatePaymentIntent) {\n    return createPaymentIntent({ data, url: this.url });\n  }\n}\n", "import { DataVault } from \"./data-vault\";\nimport { PaymentIntent } from \"./payment-intent\";\n\nexport class Payments {\n  public readonly url: string;\n  public readonly dataVault: DataVault;\n  public readonly paymentIntent: PaymentIntent;\n\n  constructor(url: string) {\n    this.url = url;\n    this.dataVault = new DataVault(url);\n    this.paymentIntent = new PaymentIntent(url);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
